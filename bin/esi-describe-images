#!/usr/bin/env python
#
# Copyright 2009-2015 Eucalyptus Systems, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.
#
# Please contact Eucalyptus Systems, Inc., 6750 Navigator Way, Goleta
# CA 93117, USA or visit http://www.eucalyptus.com/licenses/ if you need
# additional information or have any questions.
import os
import argparse
import re
import boto
import rpm
from prettytable import PrettyTable
from esitoolsupport.esibase import EsiBase
from esitoolsupport import PROVIDED_SERVICES


class ServiceImageManager(EsiBase):
    IMAGE_NAME = 'eucalyptus-service-image'
    IMAGE_RE = re.compile('^eucalyptus-service-image')

    def __init__(self, args):
        super(self.__class__, self).__init__(args)
        self._ec2 = boto.connect_ec2_endpoint(self.get_env_var('EC2_URL'))
        self._sts = self.get_sts_connection()
        self._system_accounts = self.list_system_accounts()
        self._get_images()

    def _get_images(self):
        filters = {'tag:type': [self.IMAGE_NAME]}
        return self._ec2.get_all_images(filters=filters)

    def _get_image_version(self):
        ts = rpm.TransactionSet()
        matches = ts.dbMatch('name', self.IMAGE_NAME)
        for package in matches:
            return package['version']

    def list(self, show_instances=False):
        table = PrettyTable(['SERVICE', 'VERSION', 'ACTIVE', 'IMAGE', 'INSTANCES'],
                            border=False)
        for service in PROVIDED_SERVICES:
            for image in self._get_images():
                service_instances = self._get_service_instances(service, image.id)
                if image.id == self._get_property('services.{0}.worker.image'.format(service)):
                    state = '*'
                else:
                    state = ''
                if show_instances:
                    for instance in service_instances:
                        table.add_row([service, image.tags['version'], state, image.id,
                                       instance.id])
                else:
                    table.add_row([service, image.tags['version'], state, image.id,
                                   len(service_instances)])
        print table

    def _get_image_instances(self, image):
        return self._ec2.get_all_instances(filters={'image-id': image.id})

    def _get_service_instances(self, service, image_id):
        role = self._sts.assume_role(
            role_arn="arn:aws:iam::{0}:role/{1}/{2}ServiceAdministrator".format(
                self._system_accounts['(eucalyptus){0}'.format(service)],
                service, service.capitalize()),
            role_session_name=service)
        ec2 = boto.connect_ec2_endpoint(self.get_env_var('EC2_URL'),
                                        aws_access_key_id=role.credentials.access_key,
                                        aws_secret_access_key=role.credentials.secret_key,
                                        security_token=role.credentials.session_token)
        filters = {'tag:service-type': service,
                   'instance-state-name': 'running',
                   'image-id': image_id}
        instances = []
        for reservation in ec2.get_all_instances(filters=filters):
            instances += reservation.instances
        # before 4.2 loadbalancing instances were running under cloud admin user with a different tag
        if 'loadbalancing' == service:
            old_filters = {'tag:Name': 'loadbalancer-resources',
                           'instance-state-name': 'running',
                           'image-id': image_id}
            for reservation in self._ec2.get_all_instances(filters=old_filters):
                instances += reservation.instances
        return instances


if __name__ == "__main__":
    description = '''
    Imaging Service Installation Tool:

    This tool provides an easy way to install a Eucalyptus Imaging
    Service image.  Normally, you'll want to pass '--install-default'
    to install the latest Imaging Service image and register it with
    Eucalyptus. You may next want to pass '--remove-old' if you need
    to clean up older versions of the Imaging Service image.

    Installed Imaging Service images will be marked with a "version" number
    that differentiates one installed Imaging Service from another. The
    larger the "version", the more recently the Imaging Service has been
    installed.
    '''

    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description=description)
    parser.add_argument('--show-instances', action='store_true', help='')
    parser.add_argument('--region', metavar='REGION', help=('region '
                                                            'name to search when looking up config file data'))
    args, unknown = parser.parse_known_args()

    ism = ServiceImageManager(args)
    ism.list(show_instances=args.show_instances)